name: E2E Resource Access Management Cypress Tests

on: [ push, pull_request ]

env:
  CI: 1
  # avoid warnings like "tput: No value for $TERM and no -T specified"
  TERM: xterm
  PLUGIN_NAME: opensearch-security
  OPENSEARCH_INITIAL_ADMIN_PASSWORD: myStrongPassword123!
  
jobs:
  tests:
    name: Run Cypress resource-access-management tests
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Branch
        uses: actions/checkout@v5

      - name: Set up JDK 21 for build
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Set env
        run: |
          opensearch_version=$(node -p "require('./package.json').opensearchDashboards.version")
          plugin_version=$(node -p "require('./package.json').version")
          echo "OPENSEARCH_VERSION=$opensearch_version" >> $GITHUB_ENV
          echo "PLUGIN_VERSION=$plugin_version" >> $GITHUB_ENV
        shell: bash

      - name: Download security plugin and create setup scripts
        uses: ./.github/actions/download-plugin
        with:
          opensearch-version: ${{ env.OPENSEARCH_VERSION }}
          plugin-name: ${{ env.PLUGIN_NAME }}
          plugin-version: ${{ env.PLUGIN_VERSION }}
          download-location: ${{env.PLUGIN_NAME}}

      # build sample-resource-plugin from source (Linux runner)
      - name: Build sample-resource-plugin (server)
        shell: bash
        run: |
          set -euo pipefail

          # Shallow clone at main
          git clone --depth 1 https://github.com/opensearch-project/security.git security-src

          pushd security-src
            # Build the sample plugin from the repo root
            chmod +x ./gradlew
            ./gradlew :opensearch-sample-resource-plugin:assemble

            # Pick the built zip
            ZIP_PATH=$(ls -t sample-resource-plugin/build/distributions/*.zip | head -n1)
            echo "Built sample plugin: $ZIP_PATH"

            # Copy to workspace for installation
            cp "$ZIP_PATH" "$GITHUB_WORKSPACE/sample-resource-plugin.zip"
          popd


          echo "SAMPLE_PLUGIN_ZIP=$GITHUB_WORKSPACE/sample-resource-plugin.zip" >> $GITHUB_ENV

      - name: Run Opensearch with security + sample resource plugin
        uses: derek-ho/start-opensearch@v8
        with:
          opensearch-version: ${{ env.OPENSEARCH_VERSION }}
          plugins: "file:$(pwd)/opensearch-security.zip,file:${{ env.SAMPLE_PLUGIN_ZIP }}"
          security-enabled: true
          admin-password: ${{ env.OPENSEARCH_INITIAL_ADMIN_PASSWORD }}
          jdk-version: 21
          resource-sharing-enabled: true

      - name: Check OpenSearch is running
        run: |
          curl https://localhost:9200/_cat/plugins -v -u admin:${{ env.OPENSEARCH_INITIAL_ADMIN_PASSWORD }} -k
        shell: bash

      # OSD bootstrap
      - name: Setup Dashboard with Security Dashboards Plugin
        uses: derek-ho/setup-opensearch-dashboards@v1
        with:
          plugin_name: security-dashboards-plugin

      - name: Compile OpenSearch Dashboards
        run: |
          node scripts/build_opensearch_dashboards_platform_plugins --no-examples --workers=10 --verbose
        shell: bash
        working-directory: OpenSearch-Dashboards

      - name: Run OpenSearch Dashboards
        run: |
          nohup yarn start --no-base-path --no-watch --csp.warnLegacyBrowsers=false | tee dashboard.log &
        shell: bash
        working-directory: OpenSearch-Dashboards

      # Check if OSD is ready with a max timeout of 300 seconds
      - name: Wait for OpenSearch Dashboards (status API)
        shell: bash
        working-directory: OpenSearch-Dashboards
        env:
          OSD_URL: http://localhost:5601
          OSD_USER: admin
          OSD_PASS: ${{ env.OPENSEARCH_INITIAL_ADMIN_PASSWORD }}
        run: |
          set -euo pipefail
          TIMEOUT=300; INTERVAL=5; end=$((SECONDS + TIMEOUT))
          code=""; resp=""

          while (( SECONDS < end )); do
            resp="$(curl -s -k -u "${OSD_USER}:${OSD_PASS}" -H 'kbn-xsrf: true' "${OSD_URL}/api/status" || echo "")"
            code="$(curl -s -k -o /dev/null -w '%{http_code}' -u "${OSD_USER}:${OSD_PASS}" -H 'kbn-xsrf: true' "${OSD_URL}/api/status" || echo "")"

            if [ "${code:-}" = "200" ] && echo "${resp:-}" | grep -Eiq '"(overall|status)".*"(available|green)"'; then
              echo "OpenSearch Dashboards status is green."
              exit 0
            fi
            sleep "${INTERVAL}"
          done

          echo "Timed out after ${TIMEOUT}s waiting for OpenSearch Dashboards status."
          tail -n 200 dashboard.log || true
          exit 1


      - name: Run Cypress Tests with retry
        uses: Wandalen/wretry.action@v3.3.0
        with:
          attempt_limit: 5
          attempt_delay: 2000
          command: |
            cd ./OpenSearch-Dashboards/plugins/security-dashboards-plugin
            yarn add cypress --save-dev
            eval 'CYPRESS_VERIFY_TIMEOUT=60000 yarn cypress:run --browser chrome --headless --env LOGIN_AS_ADMIN=true --spec "test/cypress/e2e/multi-datasources/multi_datasources_enabled.spec.js"' 

