name: CD

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout OpenSearch Dashboards
        uses: actions/checkout@v2
        with:
          path: OpenSearch-Dashboards
          repository: opensearch-project/OpenSearch-Dashboards
          fetch-depth: 0
      - name: Create plugins dir
        run: |
          cd ./OpenSearch-Dashboards
          mkdir -p plugins
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: OpenSearch-Dashboards/plugins/security-dashboards-plugin
          ref: ${{ github.ref }}
      - name: Get OpenSearch Dashboards version
        id: osd_version
        run: |
          echo "::set-output name=osd_version::$(jq -r '.opensearchDashboards.version' ./OpenSearch-Dashboards/plugins/security-dashboards-plugin/package.json)"
      - name: Get plugin version
        id: plugin_version
        run: |
          echo "::set-output name=plugin_version::$(jq -r .version ./OpenSearch-Dashboards/plugins/security-dashboards-plugin/opensearch_dashboards.json)"
      - name: Use OpenSearch Dashboards release commit
        run: |
          cd ./OpenSearch-Dashboards
          git checkout tags/v${{ steps.osd_version.outputs.osd_version }} -b v${{ steps.osd_version.outputs.osd_version }}
      - name: Get node and yarn versions
        id: versions
        run: |
          echo "::set-output name=node_version::$(cat ./OpenSearch-Dashboards/.node-version)"
          echo "::set-output name=yarn_version::$(jq -r '.engines.yarn' ./OpenSearch-Dashboards/package.json)"
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ steps.versions.outputs.node_version }}
          registry-url: 'https://registry.npmjs.org'
      - name: Install correct yarn version for OpenSearch Dashboards
        run: |
          npm uninstall -g yarn
          echo "Installing yarn ${{ steps.versions_step.outputs.yarn_version }}"
          npm i -g yarn@${{ steps.versions.outputs.yarn_version }}
      - name: Bootstrap OpenSearch Dashboards
        run: |
          cd ./OpenSearch-Dashboards
          yarn osd bootstrap --oss
      - name: build security plugin
        id: build_zip
        run: |
          cd ./OpenSearch-Dashboards/plugins/security-dashboards-plugin
          yarn build --opensearch-dashboards-version ${{ steps.kbn_version.outputs.kbn_version }}
          artifact_path=`ls $(pwd)/build/opendistro_security*.zip`
          artifact_name=`basename $artifact_path`
          echo "::set-output name=ARTIFACT_PATH::$artifact_path"
          echo "::set-output name=ARTIFACT_NAME::$artifact_name"
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_STAGING_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_STAGING_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - name: Upload Artifacts to S3
        shell: bash
        run: |
          s3_prefix="s3://staging.artifacts.opendistroforelasticsearch.amazon.com/snapshots/kibana-plugins/security/"

          # Rename
          mv ${{ steps.build_zip.outputs.ARTIFACT_PATH }} opendistroSecurityKibana-${{ steps.plugin_version.outputs.plugin_version }}.zip
          zip=`ls build/opendistroSecurityKibana*.zip`

          # Inject the build number before the suffix
          zip_outfile=`basename ${zip%.zip}-build-${GITHUB_RUN_NUMBER}.zip`

          echo "Copying ${zip} to ${s3_prefix}${zip_outfile}"
          aws s3 cp --quiet $zip ${s3_prefix}${zip_outfile}
          
